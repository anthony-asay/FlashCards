/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.Application_controller;
import Controller.Deck_controller;
import Controller.Flashcard_controller;
import Controller.Score_controller;
import Model.Deck;
import Model.Flashcard;
import Model.User;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Array;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import static java.util.Spliterators.iterator;
import static java.util.Spliterators.iterator;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.Timer;
import javax.swing.UIManager;

/**
 *
 * @author Anthony
 */
public class StartStudyView extends javax.swing.JFrame {

    private Application_controller app = new Application_controller();
    private Score_controller control = new Score_controller();
    private Deck deck = new Deck();
    private Flashcard_controller controlCard = new Flashcard_controller();
    private Flashcard card;
    private User user;
    private List<Flashcard> cardList = new ArrayList<Flashcard>(); 
    private float total = 0;
    private float correct = 0;
    private float current = 1;
    private int index = 0;
    private String questionNew;
    private String answerNew;
    int elapsedSeconds;
    private long duration;
    public StartStudyView(User user, Deck deck, int seconds) {
        initComponents();
        this.deck = deck;
        this.user = user;
        this.duration = seconds * 1000;
        Set<Flashcard> cardSet = deck.getFlashcards();
        
        for(Iterator iterator = cardSet.iterator(); iterator.hasNext();)
        {
            Flashcard itemOld = (Flashcard) iterator.next(); 
            this.cardList.add(itemOld);
        }
        this.total = cardList.size();
        totalNumber.setText(String.valueOf(total));
        currentNumber.setText(String.valueOf(current));
        this.questionNew = cardList.get(index).getQuestion();
        this.answerNew = cardList.get(index).getAnswer();
        questionLabel.setText(this.questionNew);
        CountDown();

    }

    private Timer timer;
    private long startTime = -1;
    

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        timerLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        header = new javax.swing.JLabel();
        questionLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        submitButton = new javax.swing.JButton();
        answer = new javax.swing.JTextField();
        currentNumber = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        totalNumber = new javax.swing.JLabel();
        returnButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Seconds Left");

        header.setText("Question");

        questionLabel.setText("jLabel3");

        jLabel3.setText("Answer:");

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        currentNumber.setText("jLabel4");

        jLabel4.setText("/");

        totalNumber.setText("jLabel5");

        returnButton.setText("Return");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(timerLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(returnButton)))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(header)
                        .addGap(22, 22, 22)
                        .addComponent(currentNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalNumber)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(questionLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(answer, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(submitButton)))
                        .addGap(0, 58, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(header)
                    .addComponent(currentNumber)
                    .addComponent(jLabel4)
                    .addComponent(totalNumber)
                    .addComponent(returnButton))
                .addGap(18, 18, 18)
                .addComponent(questionLabel)
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(answer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(submitButton))
                .addGap(84, 84, 84)
                .addComponent(timerLabel)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        System.out.println(answer.getText());
        System.out.println(this.answerNew);
        if(answer.getText().toLowerCase().equals(this.answerNew))
        {
            correct++;
        }
        this.index++;
        this.current++;
        if(!(this.current > this.total))
        {
            this.questionNew = this.cardList.get(index).getQuestion();
            this.answerNew = this.cardList.get(index).getAnswer();
            questionLabel.setText(this.questionNew);
            currentNumber.setText(String.valueOf(current));
            answer.setText("");
        }
        else
        {
            questionLabel.setText("You finished!");
            questionLabel.setForeground(Color.green);
            header.setText("Score:");
            currentNumber.setText(String.valueOf(correct));
            currentNumber.setForeground(Color.green);
            timer.stop();
            CalculateScore();
            submitButton.setEnabled(false);
        }
        
    }//GEN-LAST:event_submitButtonActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        app.getDeckListView(this, user);
    }//GEN-LAST:event_returnButtonActionPerformed

    public void endQuiz()
    {
        questionLabel.setText("Time is up!");
        questionLabel.setForeground(Color.green);
        header.setText("Score:");
        currentNumber.setText(String.valueOf(correct));
        currentNumber.setForeground(Color.green);
        timerLabel.setForeground(Color.red);
        CalculateScore();
        submitButton.setEnabled(false);
    }
    public void CalculateScore()
    {
        float totalScore = (float) (Math.round((correct/total) * 100 * 100d) / 100d);
        control.addScore(deck, user, totalScore);
    }
    
    public void CountDown() {
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
               
            setLayout(new BorderLayout(0, 100));
            timer = new Timer(10, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (startTime < 0) {
                        startTime = System.currentTimeMillis();
                    }
                    long now = System.currentTimeMillis();
                    long clockTime = now - startTime;
                    if (clockTime >= duration) {
                        clockTime = duration;
                        timer.stop();
                        endQuiz();
                    }
                    SimpleDateFormat df = new SimpleDateFormat("mm:ss:SSS");
                    timerLabel.setText(df.format(duration - clockTime));
                }
            });
            timer.setInitialDelay(0);
            timer.start();
//            addMouseListener(new MouseAdapter() {
//                @Override
//                public void mouseClicked(MouseEvent e) {
//                    if (!timer.isRunning()) {
//                        startTime = -1;
//                        timer.start();
//                    }
//                }
//            });
            timerLabel = new JLabel("...");
            add(timerLabel);
        }
       
        });
    }

    


  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField answer;
    private javax.swing.JLabel currentNumber;
    private javax.swing.JLabel header;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel questionLabel;
    private javax.swing.JButton returnButton;
    private javax.swing.JButton submitButton;
    private javax.swing.JLabel timerLabel;
    private javax.swing.JLabel totalNumber;
    // End of variables declaration//GEN-END:variables
}
